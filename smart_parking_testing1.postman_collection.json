{
	"info": {
		"_postman_id": "630f40a4-62c7-495f-bfa4-edf159b8bf4d",
		"name": "smart_parking_testing1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "2236092"
	},
	"item": [
		{
			"name": "device",
			"item": [
				{
					"name": "get_all",
					"item": [
						{
							"name": "device_get_all_200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Schema is valid\", function () {\r",
											"  var schema = {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      Success: { type: \"boolean\" },\r",
											"      Message: { type: \"null\" },\r",
											"      Data: {\r",
											"        type: \"object\",\r",
											"        properties: {\r",
											"          TotalRecords: { type: \"number\" },\r",
											"          Records: {\r",
											"            type: \"array\",\r",
											"            items: {\r",
											"              type: \"object\",\r",
											"              properties: {\r",
											"                Id: { type: \"number\" },\r",
											"                Name: { type: \"string\" },\r",
											"                Code: { type: \"string\" },\r",
											"                Type: { type: \"string\" },\r",
											"                IPAddress: { type: \"string\" },\r",
											"                OnvifPort: { type: [\"number\", \"null\"] },\r",
											"                RtspPort: { type: [\"string\", \"null\"] },\r",
											"                Channel: { type: \"string\" },\r",
											"                UserName: { type: \"string\" },\r",
											"                Password: { type: \"string\" },\r",
											"                SubStream: { type: [\"string\", \"null\"] },\r",
											"                MainStream: { type: [\"string\", \"null\"] },\r",
											"                LprCamera: { type: [\"string\", \"null\"] },\r",
											"                ImageProcessing: { type: [\"string\", \"null\"] },\r",
											"                Lane: { type: \"string\" },\r",
											"                CheckStatus: { type: \"boolean\" },\r",
											"                CreatedDate: { type: \"string\" },\r",
											"                GateId: { type: \"number\" },\r",
											"                GateName: { type: \"string\" },\r",
											"                VehicleTypeId: { type: \"number\" },\r",
											"                VehicleTypeName: { type: \"string\" },\r",
											"                IsTakeFacePhoto: { type: \"boolean\" },\r",
											"                IsCheckIn: { type: \"boolean\" },\r",
											"                ScreenPosition: { type: \"number\" }\r",
											"              },\r",
											"              required: [\"Id\", \"Name\", \"Code\", \"Type\", \"IPAddress\", \"Channel\", \"UserName\", \"Password\", \"Lane\", \"CheckStatus\", \"CreatedDate\", \"GateId\", \"GateName\", \"VehicleTypeId\", \"VehicleTypeName\", \"IsTakeFacePhoto\", \"IsCheckIn\", \"ScreenPosition\"]\r",
											"            }\r",
											"          }\r",
											"        },\r",
											"        required: [\"TotalRecords\", \"Records\"]\r",
											"      }\r",
											"    },\r",
											"    required: [\"Success\", \"Message\", \"Data\"]\r",
											"  };\r",
											"\r",
											"  var response = pm.response.json();\r",
											"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Add a test to check if the response Records match the values from a JSON file\r",
											"pm.test(\"Response Records match the values from a JSON file\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedRecords = pm.iterationData.get(\"expectedRecords\"); // Assuming the JSON file is stored in iteration data\r",
											"\r",
											"    jsonData.Data.Records.forEach(function(record, index) {\r",
											"        pm.expect(record).to.eql(expectedRecords[index]);\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "ApiKey",
										"value": "SPM._jPOzPukV-Q6bnpxeW5YyEl1EwI9jFZzkaeltrHu_Cs",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/admin/device?Keyword={{keyword}}&DeviceName={{device_name}}&PageNumber={{page_number}}&PageSize={{page_size}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"admin",
										"device"
									],
									"query": [
										{
											"key": "Keyword",
											"value": "{{keyword}}"
										},
										{
											"key": "DeviceName",
											"value": "{{device_name}}"
										},
										{
											"key": "PageNumber",
											"value": "{{page_number}}"
										},
										{
											"key": "PageSize",
											"value": "{{page_size}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhZG1pbkBnbWFpbC5jb20iLCJqdGkiOiJkM2Q3YzI0OS05ZTgwLTQzMjEtOTIxNi0zM2FiMWVkYTNlMzIiLCJpYXQiOjE3MjIxODQ5ODQsInJvbCI6WyJhcGlfYWNjZXNzIiwiYXBpX2FjY2VzcyJdLCJpZCI6WyJhMjQ1OGQ3MC0zNzhjLTQ0NDctYmEwMy01ZjhlM2U4MjZlZmQiLCJhMjQ1OGQ3MC0zNzhjLTQ0NDctYmEwMy01ZjhlM2U4MjZlZmQiXSwiaHR0cDovL3NjaGVtYXMueG1sc29hcC5vcmcvd3MvMjAwNS8wNS9pZGVudGl0eS9jbGFpbXMvbmFtZSI6ImFkbWluQGdtYWlsLmNvbSIsImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vd3MvMjAwOC8wNi9pZGVudGl0eS9jbGFpbXMvcm9sZSI6IkFkbWluaXN0cmF0b3IiLCJuYmYiOjE3MjIxODQ5ODQsImV4cCI6MTcyMjE4ODU4NCwiaXNzIjoid2ViQXBpIiwiYXVkIjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwIn0.TqvN4L8Gbo9s3HoOyzpzZqCNIRcOK0jE37Dn1pvS-Wk",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "api_key",
			"value": "SPM._jPOzPukV-Q6bnpxeW5YyEl1EwI9jFZzkaeltrHu_Cs",
			"type": "string"
		}
	]
}